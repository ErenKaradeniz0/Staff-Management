@model Staff_Management.Models.AssignStaffViewModel
@{
    ViewBag.Title = "AssignStaff";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Html.Partial("SystemAdminNav")

<div class="container mt-5">
    <h2>Assign Staff</h2>

    <div id="groupAdminList">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Group Admin</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var groupAdmin in Model.GroupAdminList)
                {
                    <tr>
                        <td>@groupAdmin.Name @groupAdmin.Surname</td>
                        <td>
                            <button class="btn btn-info float-right" onclick="toggleStaffList('@groupAdmin.UserId', '@groupAdmin.Name')">Assign Staff to Admin</button>
                            <div id="staffList-@groupAdmin.UserId" class="staff-list d-none">
                                <h3>Assign Staff to Admin <span class="adminName" data-admin-id="@groupAdmin.UserId">@groupAdmin.Name</span></h3>
                                <ul id="staffUl-@groupAdmin.UserId" class="list-group">
                                    @{string? checkedStatus;
                                        foreach (var staff in Model.StaffList)
                                        {

                                            using (Html.BeginForm("AssignStaff", "SystemAdmin", FormMethod.Post, new { id = $"form_{staff.UserId}_{groupAdmin.UserId}" }))
                                            {
                                                bool isChecked = IsStaffIdAssignedtoGroupAdmin(staff.UserId, groupAdmin.UserId);
                                                @Html.Hidden("staffId", staff.UserId)
                                                @Html.Hidden("adminId", groupAdmin.UserId)
                                                @Html.Hidden("isChecked", isChecked)
                                                if (IsStaffIdAssignedtoGroupAdmin(staff.UserId, groupAdmin.UserId))
                                                {
                                                    <li class="list-group-item">
                                                        <input type="checkbox" class="form-check-input" id="checkbox_@staff.UserId" onchange="submitForm('@staff.UserId', '@groupAdmin.UserId')" checked>
                                                        <label for="checkbox_@staff.UserId">@staff.Name</label>
                                                    </li>

                                                }
                                                else if (!IsStaffIdAssigned(staff.UserId))
                                                {
                                                    <li class="list-group-item">
                                                        <input type="checkbox" class="form-check-input" id="checkbox_@staff.UserId" onchange="submitForm('@staff.UserId', '@groupAdmin.UserId')">
                                                        <label for="checkbox_@staff.UserId">@staff.Name</label>
                                                    </li>

                                                }
                                            }
                                        }

                                    }
                                </ul>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@functions {
    // Sample method to check if staff ID is assigned to a specific admin
    bool IsStaffIdAssigned(int staffId)
    {
        var assignment = Model.AssingmentsList.FirstOrDefault(a => a.StaffId == staffId);

        return assignment != null && assignment.GroupAdminId != null;
    }
    bool IsStaffIdAssignedtoGroupAdmin(int staffId, int adminId)
    {
        // Fetch assigned staff IDs for the specific admin from the model
        var assignedStaffIds = Model.AssingmentsList
            .Where(a => a.StaffId == staffId && a.GroupAdminId == adminId)
            .Select(a => a.StaffId)
            .ToList();
        return assignedStaffIds.Contains(staffId);
    }

}

<script>
    function submitForm(staffId, adminId) {
        var formId = 'form_' + staffId + '_' + adminId;
        document.getElementById(formId).submit();
    }

    function toggleStaffList(adminId, adminName) {
        const staffList = document.getElementById(`staffList-${adminId}`);
        const adminNameElement = staffList.querySelector('.adminName');
        const currentAdminNameElement = staffList.querySelector('.currentAdminName');

        if (staffList.classList.contains('d-none')) {
            // Show the staff list
            staffList.classList.remove('d-none');
            // Update the current admin name
            currentAdminNameElement.innerText = adminName;

            // Initialize assigned staff for this admin if not already
            if (!assignedStaff[adminId]) {
                assignedStaff[adminId] = [];
            }

            // Update the assigned staff list
            updateAssignedStaffList(adminId);
        } else {
            // Hide the staff list
            staffList.classList.add('d-none');
        }
    }

    function assignStaff(checkbox, staffName, adminId) {
        if (!assignedStaff[adminId]) {
            assignedStaff[adminId] = [];
        }

        if (checkbox.checked) {
            assignedStaff[adminId].push(staffName);
        } else {
            const index = assignedStaff[adminId].indexOf(staffName);
            if (index !== -1) {
                assignedStaff[adminId].splice(index, 1);
            }
        }
        updateAssignedStaffList(adminId);
    }

    function updateAssignedStaffList(adminId) {
        const assignedStaffUl = document.getElementById(`assignedStaffUl-${adminId}`);
        assignedStaffUl.innerHTML = '';

        assignedStaff[adminId].forEach(staffName => {
            const li = document.createElement('li');
            li.className = 'list-group-item';
            li.innerText = staffName;
            assignedStaffUl.appendChild(li);
        });
    }
</script>
